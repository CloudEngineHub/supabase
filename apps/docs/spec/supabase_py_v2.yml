```markdown
  - id: max-affected
    title: 'Set maximum affected rows'
    description: |
      Set the maximum number of rows that can be affected by the query. Only available in PostgREST v13+ and only works with PATCH and DELETE methods. If more rows would be affected than the specified maximum, PostgREST returns an error instead of performing the operation.
    params:
      - name: value
        isOptional: false
        type: int
        description: The maximum number of rows that can be affected by the query
    returns:
      type: Self
      description: Returns the query builder instance for method chaining
    notes: |
      - Requires PostgREST v13+
      - Only works with PATCH and DELETE HTTP methods
      - Sets 'handling=strict' and 'max-affected={value}' in the Prefer header
      - If the number of affected rows would exceed the specified limit, PostgREST returns an error instead of performing the operation
      - Useful for preventing accidental mass updates or deletions
    examples:
      - id: basic-update
        name: Basic usage with update
        description: |
          Update rows with a maximum of 5 rows affected
        code: |
          ```python
          response = (
              supabase.table("countries")
              .update({"name": "Australia"})
              .max_affected(5)
              .execute()
          )
          ```
      - id: basic-delete
        name: Basic usage with delete
        description: |
          Delete rows with a maximum of 10 rows affected
        code: |
          ```python
          response = (
              supabase.table("countries")
              .delete()
              .max_affected(10)
              .execute()
          )
          ```
      - id: chained-filters
        name: Chained with filters
        description: |
          Update a single row by ID with a maximum of 1 row affected
        code: |
          ```python
          response = (
              supabase.table("countries")
              .update({"name": "Australia"})
              .eq("id", 1)
              .max_affected(1)
              .execute()
          )
          ```
```